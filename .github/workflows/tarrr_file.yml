name: Test 1 build      
env:        
  RELEASE: '2021.1'        
  PIPELINE: 'xrt'       
  ENV: 'test'      
      
on:      
  workflow_dispatch:      
        
jobs:      
  # build:      
  #   strategy:            
  #     matrix:            
  #       include:            
  #         - os: centos8          
  #           packageType: rpm    
  #           os_ver: centos_8.1          
  #         - os: ubuntu2004          
  #           packageType: deb    
  #           os_ver: ubuntu_20.04          
  #         - os: ubuntu2204          
  #           packageType: deb    
  #           os_ver: ubuntu_22.04     
  #         - os: amazonlinux-20202011111     
  #           packageType: rpm    
  #           os_ver: amazonlinux20202011111         
  #         - os: ubuntu1804          
  #           packageType: deb       
  #           os_ver: ubuntu_18.04             
              
  #   runs-on: [self-hosted, Ubuntu-22.04]      
  #   steps:        
  #     - name: Set env variables          
  #       run: |          
  #         echo "Setting environment variables..."            
  #         echo "XRT_VERSION_PATCH=$(($GITHUB_RUN_NUMBER+717))" >> $GITHUB_ENV          
  #         echo "PATH=/usr/bin:$PATH" >> $GITHUB_ENV           
          
  #     - name: Checkout PR     
  #       uses: actions/checkout@v3   
  #       with:   
  #         ref: '2021.1'  
  #         fetch-depth: 0  
  #         path: ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}    
  #         submodules: recursive        
      
  #     - name: Checkout private repository            
  #       uses: actions/checkout@v3         
  #       with:            
  #         repository: actions-int/composite-workflows      
  #         github-server-url: ${{ secrets.SERVER_URL }}            
  #         token: ${{ secrets.ACCESS_TOKEN }}            
  #         path: composite-workflows       
  #         ref: image      
      
  #     - name: XRT build           
  #       uses: ./composite-workflows/build      
  #       with:           
  #         pipeline: ${{ env.PIPELINE }}       
  #         osVersion: ${{ matrix.os }}        
  #         packageType: ${{ matrix.packageType }}      
  #         os_ver: ${{ matrix.os_ver }}        
  #         workspace: ${{ github.workspace }}      
  #         buildNumber: ${{ env.XRT_VERSION_PATCH }}           
  #         accessToken: ${{ secrets.ACCESS_TOKEN }}      
  #         github-server-url: ${{ secrets.SERVER_URL }}      
  #         appConfig: ${{ secrets.APP_CONFIG }}       
  #         appConfig1: ${{ secrets.APP_CONFIG1 }}       
  #         appConfig2: ${{ secrets.APP_CONFIG2 }}       
  #         appConfig3: ${{ secrets.APP_CONFIG3 }}       
      
      
  package-download:          
    # needs: [build]          
    runs-on: [self-hosted, Ubuntu-22.04]          
    steps:      
      - name: Set env variables          
        run: |          
          echo "Setting environment variables..."            
          echo "XRT_VERSION_PATCH=$(($GITHUB_RUN_NUMBER+717))" >> $GITHUB_ENV          
          echo "PATH=/usr/bin:$PATH" >> $GITHUB_ENV     
    
      - name: Checkout PR           
        uses: actions/checkout@v3         
        with:         
          fetch-depth: 0        
          path: ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}          
          submodules: recursive      
    
      - name: List contents of Repo  
        run: |    
          echo "Contents of Repo directory:"    
          ls -al ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}  
        shell: bash   
    
      # - name: Checkout private repository          
      #   uses: actions/checkout@v3       
      #   with:          
      #     repository: actions-int/composite-workflows          
      #     token: ${{ secrets.ACCESS_TOKEN }}      
      #     github-server-url: ${{ secrets.SERVER_URL }}          
      #     path: composite-workflows       
      #     ref: '2021.1'      
    
      # - name: Use composite action package download           
      #   uses: ./composite-workflows/package-download         
      #   with:          
      #     runNumber: ${{ env.XRT_VERSION_PATCH }}          
      #     pipeline: ${{ env.PIPELINE }}          
      #     env: ${{ env.ENV }}      
      #     release: ${{ env.RELEASE }}        
      #     sshKey: ${{ secrets.CI_PRIVATE_SSH_KEY }}          
      #     accessToken: ${{ secrets.ACCESS_TOKEN }}      
      #     NPATH: ${{ secrets.NPATH }}      
      #     USER: ${{ secrets.USER }}      
      #     github-server-url: ${{ secrets.SERVER_URL }}       
    
      # - name: List contents of artifact directory        
      #   run: |        
      #     cd ${{ env.PATH_DIR }}/artifact        
      #     ls -al        
      #   shell: bash        
    
      - name: Find and copy packages      
        run: |      
          cd ${{ secrets.NPATH }}/xrt/test_pipeline/builds/2021.1/859/staging/artifact  
          ls -al     
          rm -rf xrt_202110.2.11.859_amzn2-x86_64-xrt.rpm  
          for package_file in *-xrt.rpm *-xrt.deb; do     
            echo "Found package: $package_file"      
            cp $package_file ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/      
          done      
    

          # Copy only the required XCR and XRM packages  
          base_path="${{ secrets.APP_CONFIG4 }}"  
          cp $base_path/XCR/master/202220.1.1.27/packages/xcr_202220.1.1.27_18.04-x86_64.deb ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/  
          cp $base_path/XCR/master/202220.1.1.27/packages/xcr_202220.1.1.27_20.04-x86_64.deb ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/  
          cp $base_path/XCR/master/202220.1.1.27/packages/xcr_202220.1.1.27_22.04-x86_64.deb ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/  
          cp $base_path/XCR/master/202220.1.1.27/packages/xcr_202220.1.1.27_7.9.2009-x86_64.rpm ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/  
          cp $base_path/XCR/master/202220.1.1.27/packages/xcr_202220.1.1.27_2-x86_64.rpm ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/  
    
          cp $base_path/XRM/master/202220.1.5.103/packages/xrm_202220.1.5.103_18.04-x86_64.deb ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/  
          cp $base_path/XRM/master/202220.1.5.103/packages/xrm_202220.1.5.103_20.04-x86_64.deb ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/  
          cp $base_path/XRM/master/202220.1.5.103/packages/xrm_202220.1.5.103_22.04-x86_64.deb ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/  
          cp $base_path/XRM/master/202220.1.5.103/packages/xrm_202220.1.5.103_7.8.2003-x86_64.rpm ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/  
          cp $base_path/XRM/master/202220.1.5.103/packages/xrm_202220.1.5.103_2-x86_64.rpm ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/  
          echo "Copied required XCR and XRM packages"  
        shell: bash    
        
      - name: List contents of Dockerfile directory      
        run: |      
          echo "Contents of Dockerfile directory:"      
          ls -al ${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile      
        shell: bash       
        
      - name: Build Docker images          
        run: |          
          set -e  # Exit on any error        
          package_files=("$GITHUB_WORKSPACE/${{ env.XRT_VERSION_PATCH }}/Dockerfile/"*-xrt.rpm "$GITHUB_WORKSPACE/${{ env.XRT_VERSION_PATCH }}/Dockerfile/"*-xrt.deb)      
                
          if [ ${#package_files[@]} -eq 0 ]; then      
            echo "No package files found."      
            exit 1      
          fi      
          
          for package_file in "${package_files[@]}"; do            
              echo "Building image for $package_file"            
              image_tag=$(basename "$package_file" | sed 's/\.[^.]*$//')            
                
              if [[ "$package_file" == *"18.04"* ]]; then            
                  base_image="ubuntu:18.04"            
                  install_commands='apt-get update && apt-get install -y wget && dpkg -i /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_18.04-x86_64.deb /tmp/xrm_202220.1.5.103_18.04-x86_64.deb || apt-get install -f -y && rm -f /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_18.04-x86_64.deb /tmp/xrm_202220.1.5.103_18.04-x86_64.deb && dpkg -l | grep xrt'  
              elif [[ "$package_file" == *"20.04"* ]]; then            
                  base_image="ubuntu:20.04"            
                  install_commands='apt-get update && apt-get install -y wget && dpkg -i /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_20.04-x86_64.deb /tmp/xrm_202220.1.5.103_20.04-x86_64.deb || apt-get install -f -y && rm -f /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_20.04-x86_64.deb /tmp/xrm_202220.1.5.103_20.04-x86_64.deb && dpkg -l | grep xrt'  
              elif [[ "$package_file" == *"22.04"* ]]; then            
                  base_image="ubuntu:22.04"            
                  install_commands='apt-get update && apt-get install -y wget && dpkg -i /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_22.04-x86_64.deb /tmp/xrm_202220.1.5.103_22.04-x86_64.deb || apt-get install -f -y && rm -f /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_22.04-x86_64.deb /tmp/xrm_202220.1.5.103_22.04-x86_64.deb && dpkg -l | grep xrt'  
              elif [[ "$package_file" == *"8.1.1911"* ]]; then            
                  base_image="centos:8"            
                  # install_commands='sed -i "s|^mirrorlist=|#mirrorlist=|g" /etc/yum.repos.d/CentOS-* && sed -i "s|^#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g" /etc/yum.repos.d/CentOS-* && yum install -y epel-release && yum install -y dnf-plugins-core wget && yum config-manager --set-enabled powertools && yum clean all && yum install -y /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_7.9.2009-x86_64.rpm /tmp/xrm_202220.1.5.103_7.8.2003-x86_64.rpm && rm -f /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_7.9.2009-x86_64.rpm /tmp/xrm_202220.1.5.103_7.8.2003-x86_64.rpm'  
                  # install_commands='yum upgrade && yum install -y wget && yum install -y dnf-plugins-core wget && yum config-manager --set-enabled powertools && yum config-manager --set-enabled appstream && yum install -y /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_7.9.2009-x86_64.rpm /tmp/xrm_202220.1.5.103_7.8.2003-x86_64.rpm && rm -f /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_7.9.2009-x86_64.rpm /tmp/xrm_202220.1.5.103_7.8.2003-x86_64.rpm'  
                  install_commands='sed -i "s|^mirrorlist=|#mirrorlist=|g" /etc/yum.repos.d/CentOS-* && sed -i "s|^#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g" /etc/yum.repos.d/CentOS-* && yum install -y epel-release && yum install -y dnf-plugins-core wget && yum config-manager --set-enabled powertools && yum clean all && yum install -y /tmp/${PACKAGE_FILE} && rm -f /tmp/${PACKAGE_FILE}'  
              elif [[ "$package_file" == *"amzn2"* ]]; then            
                  base_image="amazonlinux:2"       
                  install_commands='yum update -y && yum install -y wget gnupg2 && amazon-linux-extras install epel -y && yum install -y ocl-icd ocl-icd-devel && yum install -y tar && yum install -y /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_2-x86_64.rpm /tmp/xrm_202220.1.5.103_2-x86_64.rpm && rm -f /tmp/${PACKAGE_FILE} /tmp/xcr_202220.1.1.27_2-x86_64.rpm /tmp/xrm_202220.1.5.103_2-x86_64.rpm'  
              else            
                  echo "No matching base image found for $package_file"            
                  exit 1            
              fi        
              
              echo "Using base image: $base_image"            
              docker build --build-arg BASE_IMAGE="$base_image" --build-arg PACKAGE_FILE=$(basename "$package_file") --build-arg INSTALL_COMMANDS="$install_commands" -t "xrt_image:$image_tag" -f "$GITHUB_WORKSPACE/${{ env.XRT_VERSION_PATCH }}/Dockerfile/Dockerfile" "$GITHUB_WORKSPACE/${{ env.XRT_VERSION_PATCH }}/Dockerfile"            
          done      
        
      - name: Authenticate with Harbor        
        run: |        
          echo "${{ secrets.HARBOR_PASSWORD }}" | docker login registry.amd.com -u '${{ secrets.HARBOR_USERNAME }}' --password-stdin        
        shell: bash          
        
      - name: Push Docker images to AMD Harbor          
        run: |          
          for package_file in "${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/"*-xrt.rpm "${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/"*-xrt.deb; do          
            image_tag=$(basename "$package_file" | sed 's/\.[^.]*$//')          
            echo "Pushing image xrt_image:$image_tag"          
            docker tag "xrt_image:$image_tag" "registry.amd.com/buildops/xrt_image:$image_tag"          
            docker push "registry.amd.com/buildops/xrt_image:$image_tag"          
          done          
        shell: bash  









        
    
      # - name: Build Docker images        
      #   run: |        
      #     set -e  # Exit on any error      
      #     package_files=("$GITHUB_WORKSPACE/${{ env.XRT_VERSION_PATCH }}/Dockerfile/"*-xrt.rpm "$GITHUB_WORKSPACE/${{ env.XRT_VERSION_PATCH }}/Dockerfile/"*-xrt.deb)    
              
      #     if [ ${#package_files[@]} -eq 0 ]; then    
      #       echo "No package files found."    
      #       exit 1    
      #     fi    
        
      #     for package_file in "${package_files[@]}"; do          
      #         echo "Building image for $package_file"          
      #         image_tag=$(basename "$package_file" | sed 's/\.[^.]*$//')          
              
      #         # Use [[ ... ]] for Bash pattern matching      
      #         if [[ "$package_file" == *"18.04"* ]]; then          
      #             base_image="ubuntu:18.04"          
      #         elif [[ "$package_file" == *"20.04"* ]]; then          
      #             base_image="ubuntu:20.04"          
      #         elif [[ "$package_file" == *"22.04"* ]]; then          
      #             base_image="ubuntu:22.04"          
      #         elif [[ "$package_file" == *"8.1.1911"* ]]; then          
      #             base_image="centos:8"          
      #         elif [[ "$package_file" == *"amzn2"* ]]; then          
      #             base_image="amazonlinux:2"     
      #         # elif [[ "$package_file" == *"7.8.2003"* ]]; then          
      #         #     base_image="centos:8" 
      #         else          
      #             echo "No matching base image found for $package_file"          
      #             exit 1          
      #         fi      
            
      #         echo "Using base image: $base_image"          
      #         docker build --build-arg BASE_IMAGE="$base_image" --build-arg PACKAGE_FILE=$(basename "$package_file") -t "xrt_image:$image_tag" -f "$GITHUB_WORKSPACE/${{ env.XRT_VERSION_PATCH }}/Dockerfile/Dockerfile" "$GITHUB_WORKSPACE/${{ env.XRT_VERSION_PATCH }}/Dockerfile"          
      #     done    
    
      # - name: Authenticate with Harbor      
      #   run: |      
      #     echo "${{ secrets.HARBOR_PASSWORD }}" | docker login registry.amd.com -u '${{ secrets.HARBOR_USERNAME }}' --password-stdin      
      #   shell: bash        
    
      # - name: Push Docker images to AMD Harbor        
      #   run: |        
      #     for package_file in "${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/"*-xrt.rpm "${{ github.workspace }}/${{ env.XRT_VERSION_PATCH }}/Dockerfile/"*-xrt.deb; do        
      #       image_tag=$(basename "$package_file" | sed 's/\.[^.]*$//')        
      #       echo "Pushing image xrt_image:$image_tag"        
      #       docker tag "xrt_image:$image_tag" "registry.amd.com/buildops/xrt_image:$image_tag"        
      #       docker push "registry.amd.com/buildops/xrt_image:$image_tag"        
      #     done        
      #   shell: bash    
